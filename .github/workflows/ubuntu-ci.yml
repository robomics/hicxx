# Copyright (C) 2023 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Ubuntu CI

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/ubuntu-ci.yml"
      - "cmake/**"
      - "examples/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"
    tags:
      - 'v*.*.*'

  pull_request:
    paths:
      - ".github/workflows/ubuntu-ci.yml"
      - "cmake/**"
      - "examples/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  matrix-factory:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-result.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        if: ${{ github.event_name != 'pull_request' }}
        with:
          ref: ${{ github.sha }}

      - name: Checkout (PR)
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Detect CI type
        id: ci-type
        run: |
          if git log --format=%B -n 1 | grep -qF '[ci full]'; then
            echo "type=full" >> $GITHUB_OUTPUT
          else
            echo "type=short" >> $GITHUB_OUTPUT
          fi

      - name: Generate matrix
        uses: actions/github-script@v6
        id: set-result
        with:
          script: |
            // Documentation
            // https://docs.github.com/en/actions/learn-github-actions/contexts#fromjson
            // https://github.com/actions/runner/issues/982#issuecomment-809360765
            var ci_short = "${{ steps.ci-type.outputs.type }}" === "short"
            
            var includes = []
            // Debug builds (short CI)
            includes.push({ image: 'conanio/gcc8-ubuntu16.04',      build_type: 'Debug' })
            includes.push({ image: 'conanio/gcc12-ubuntu16.04',     build_type: 'Debug' })
            includes.push({ image: 'conanio/clang14-ubuntu16.04',   build_type: 'Debug' })
            // Release builds (short CI)
            includes.push({ image: 'conanio/gcc12-ubuntu16.04',     build_type: 'Release' })
            includes.push({ image: 'conanio/clang14-ubuntu16.04',   build_type: 'Release' })
            if (ci_short) {
              return { include: includes }
            }
            // Debug builds (long CI)
            includes.push({ image: 'conanio/gcc9-ubuntu16.04',      build_type: 'Debug' })
            includes.push({ image: 'conanio/gcc10-ubuntu16.04',     build_type: 'Debug' })
            includes.push({ image: 'conanio/gcc11-ubuntu16.04',     build_type: 'Debug' })
            includes.push({ image: 'conanio/gcc12-ubuntu16.04',     build_type: 'Debug' })
            includes.push({ image: 'conanio/clang10-ubuntu16.04',   build_type: 'Debug' })
            includes.push({ image: 'conanio/clang11-ubuntu16.04',   build_type: 'Debug' })
            includes.push({ image: 'conanio/clang12-ubuntu16.04',   build_type: 'Debug' })
            includes.push({ image: 'conanio/clang13-ubuntu16.04',   build_type: 'Debug' })
            includes.push({ image: 'conanio/clang14-ubuntu16.04',   build_type: 'Debug' })
            // Release builds (long CI)
            includes.push({ image: 'conanio/gcc8-ubuntu16.04',      build_type: 'Release' })
            includes.push({ image: 'conanio/gcc9-ubuntu16.04',      build_type: 'Release' })
            includes.push({ image: 'conanio/gcc10-ubuntu16.04',     build_type: 'Release' })
            includes.push({ image: 'conanio/gcc11-ubuntu16.04',     build_type: 'Release' })
            includes.push({ image: 'conanio/clang10-ubuntu16.04',   build_type: 'Release' })
            includes.push({ image: 'conanio/clang11-ubuntu16.04',   build_type: 'Release' })
            includes.push({ image: 'conanio/clang12-ubuntu16.04',   build_type: 'Release' })
            includes.push({ image: 'conanio/clang13-ubuntu16.04',   build_type: 'Release' })
            return { include: includes }

  build-project:
    needs: matrix-factory
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-factory.outputs.matrix) }}

    container:
      image: ${{ matrix.image }}:2.0.4
      options: "--user=root"

    env:
      CONAN_HOME: '/home/conan/.conan2'

    steps:
      - uses: actions/checkout@v3

      - name: Update CMake
        run: pip install --no-cache-dir 'cmake==3.25.*'

      - name: Generate cache key
        id: cache-key
        run: |
          image="${{ matrix.image }}"
          build_type="${{ matrix.build_type }}"
          hash="${{ hashFiles('conanfile.py', '.github/workflows/ubuntu-ci.yml') }}"

          echo "key=$image-$build_type-$hash" >> $GITHUB_OUTPUT

      - name: Cache Conan packages
        id: cache-conan
        uses: actions/cache@v3
        with:
          key: conan-${{ steps.cache-key.outputs.key }}
          path: ${{ env.CONAN_HOME }}

      - name: Clean Conan cache (pre-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source
          conan remove --confirm "*"

      - name: Install build dependencies
        run: |
          conan install .                             \
             --build=missing                          \
             --build=cascade                          \
             -pr default                              \
             -s build_type="${{ matrix.build_type }}" \
             -s compiler.libcxx=libstdc++11           \
             -s compiler.cppstd=17                    \
             --output-folder=build

      - name: Clean Conan cache (post-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source

      - name: Configure project
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -DCMAKE_PREFIX_PATH="$PWD/build"            \
                -DHICXX_ENABLE_TESTING=ON                   \
                -DHICXX_BUILD_EXAMPLES=ON                   \
                -S "${{ github.workspace }}"                \
                -B "${{ github.workspace }}/build"

      - name: Build project
        run: cmake --build build -j $(nproc)

      - name: Run unit tests
        working-directory: build
        run: |
          ctest --test-dir .        \
                --schedule-random   \
                --output-on-failure \
                --no-tests=error    \
                --timeout 30        \
                -j $(nproc)

  ubuntu-ci-status-check:
    name: Status Check (Ubuntu CI)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - matrix-factory
      - build-project

    steps:
      - name: Collect job results
        if: |
          needs.matrix-factory.result != 'success' ||
          needs.build-project.result != 'success'
        run: exit 1
